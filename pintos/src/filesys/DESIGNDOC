  	     +-------------------------+
		     |		CS 140	             |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Sean Hogan seanhogan@uchicago.edu
Charles Cary cioc@uchicago.edu


---- PRELIMINARIES ----

None

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In struct inode_disk 

enum inode_type type // dir or file
off_t length // length of this file in bytes
unsigned magic; // To know it's an inde
block_sector_t sectors[SECTOR_CNT]; // direct, indiret, dbl-indir ptrs

In  struct inode

Added:

struct lock deny_write_lock  // protects below
struct condition no_writers_cond // signaled when there are no writers
int deny_write_cnt // 0: writes okay, >0 : deny writes
int writer_cnt // nr of writers





>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

512 bytes * (123 direct ptrs + 1 indirect * (128 ptrs/sector) + 1 dblindrect ( (128 indirect/sector) * 128ptrs/sector))

= 512 * (16635) = 8,517,120 bytes.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

Files are only extended in inode_write_at, we just have a lock in that function that stops from more than one extending at once.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

A file position is only updated after the write completes. Reads don'te xtend a file, so reading will read as much as has been finished writing.



>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

We use locks.  The locking serializes the accesses on a first come, first serve basis.  Therefore, neither readers nor writers are starved.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Yes, we chose this, as it fits a max file as large as the filesystem (8 MB).  

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In struct thread

struct dir *wd //working directory added for keeping track of a processes working directory


In struct thread:

int64_t wakeup_time //added back code from project 1 so that timers don't busy wait
struct semaphore timer_semaphore //used for switching threads
struct list_elem waitelem //the wait list

In thread.c

struct list waitlist //this is here to hold the threads that are currently waiting

//represents a directory
struct dir 
  {
    struct inode *inode;                /* Backing store. */
    off_t pos;                          /* Current position. */
  };

/* A single directory entry. */
struct dir_entry 
  {
    block_sector_t inode_sector;        /* Sector number of header. */
    char name[NAME_MAX + 1];            /* Null terminated file name. */
    bool in_use;                        /* In use or free? */
  };

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

An absolute path starts with the root / sign. Otherwise, we just use the current htread's working directory to find the file.

To perform a traversal, we walk the directory tree.  We break the passed in string up into a list of directories and descend down, following the list.  At the last element, we perform whatever action the user program has requested. 

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

We use file system locks to prevent concurrent reads and writes to a directory.  
Esetially, the reads and writes are seriliazed, on a directory level, to prevent races.
These locks are at the inode level.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

We allow it to be removed. Future file system operations involving the directory will fail gracefully.  

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

We use a string. This gives the full path.  This is a simple implementation.

Our directory struct is kepy simple because a directory is built on top of an inode,
which contains most of the complications already.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct cache_block 
  {
    struct lock block_lock; // lock access to buffer cache
    struct condition no_readers_or_writers; //signal no readers/writers
    struct condition no_writers; //signal no writers
    int readers, read_waiters; // number of readers, or waiters for reads
    int writers, write_waiters; // nmber of writers, or waiters for writes
    block_sector_t sector; // Sector where this cache block resids
    bool up_to_date; // Is this new
    bool dirty; // Has it been changed
    struct lock data_lock;  // Locks accessing data
    uint8_t data[BLOCK_SECTOR_SIZE];    // Data of block
  };
---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We use a clock algorithm.  The hand moves forward, looking for a cache block to evict. If no such block currently exists, we wait, giving the cache time to settle.  We then attempt to evict again.

>> C3: Describe your implementation of write-behind.

We write when:

1) a sector is evicted from cache and it was dirty
2) the OS is shutting down
3) our flushd process flushes the cache

When (2) occurs, we flush all blocks that we can; those currently 
locked by other threads are left alone.

In (3) everything is flushed. 


>> C4: Describe your implementation of read-ahead.

We do not read ahead.  This would unnecessarily complicate the cache for such a simple system.

Furthermore, it in unncessary to pass the tests.


---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

That process temporarily holds a block on the sector's data. This prevents eviction. 

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

We have global cache lock for these situations.  This serializes evictions. 

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Buffer cache works very well for traversing directory trees because sectors of root
directories will be accessed frequently and will therefore remain in cache, speeding
reads.

Read-ahead would benefit sequential access most, like reading a large file piece by piece.

Write behind is good for random writes because writies appear to happen very quickly.  The actual write to disk can take place later, so the program isn't slowed down.

>>>>>>> aac98940bf56bf85e3287fdc433e9d68ca260386

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

It was fine.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes!

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

No.

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

No.

>> Any other comments?

No.
