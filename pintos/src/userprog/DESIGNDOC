		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

Sean Hogan seanhogan@uchicago.edu
Charles Cary cioc@uchicago.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

None

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

First we get a new page, and then copy the command line arguments entirely to
the top of the user page. 

Then, we parse the locations of the command line arguments and
place them into an array.

Then, we push the stored addresses onto the stack in reverse order.

We avoid overflowing the stacmk page by throwing an error when the
length of the command line string is larger than PGSIZE.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

We need a thread-safe version, as it's possible that we get interwoven calls of
strtok_r 's, which has an internal context. If we use strtok then that context gets
messed up from interwoven calls, whereas strtok_r uses another pointer
to deal with the context.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. We can catch errors earlier
2. More flexibility for the programs in how they use command-line arguments and talk to the kernel

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

syscall.c
---------

static bool show_syscall; // Shows debug messages

thread.c
--------

static struct dead_list; // A list of children that have finished (via crashing or not)

static struct file * fd_table[128]; // A table mapping FDs to file pointers.
#define FD_TABLE_LEN 128 // Length of the FD_TABLE
static struct lock fs_lock; // Lock for any filesystem or FD table interactions

thread.h
--------

enum child_status // Statuses for children threads
  {
    CHILD_ALIVE,
    CHILD_DEAD
  };

typedef struct { // A marker for a thread's child.
  tid_t tid; // Thread's tid.
  int retval; // This thread's exit value
  char name[16]; // name of the thread's executable
  uint8_t invalid; // DEPRECATED
  int load_result; // Whether the call to load for the executable worked
} child_thread_marker;

in struct thread:

child_thread_marker children[16]; //Array of children for a thread
int child_count; // How many children the thread currently has
tid_t parent; // If the thread has a parent, what's its tid?
struct file *exec_lock; // Pointer to its executable for locking/unlocking write permissions

int retval; // Return value of this thread when it calls exit

uint32_t fd_list[128]; // List of FDs for this thread
#define FD_LIST_LEN 128; // Max length of FD list

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Many FDs can correspond to one open file. File descriptors are unique
within the entire OS.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Reading:  Copying bytes: Call copy_in, asks the kernel for a single byte from user memory and puts it into kernel memory.

If bigger data (strings or data) are needed we call copy_in_string or copy_in_data which gives us a pointer to a page containing the data in kernel memory.

Writing: We just provide a buffer of the data and a destination address in user memory for the data, calling put_user some number of times.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Least : 1, Most: 2  - Maybe the data is stored across two pages.

For 2 bytes, also 1 or two, in the unfortunate case one byte is at the end
of the first page and one is at the beginning of the 2nd

There is no room for improvement.



>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The parent gets a marker for the child's tid, which lets it track the child.
Then the parent spins and yields until the child is not on the ready_list, implying
that the child it ehn dead. Afterwards, we re-allow write permissions
to the child's executable and close the file, and remove the child
from the parent's list.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We check if the stack pointer is messed up at the top of the dispatch
table function (syscall handler). Then within each function are
the validity of arguments checked. Copying from user memory also
checks to see if the copy worked or not.

Resources are never dynamically allocated so that when thread_exit ()
is called everything gets cleared correctly.

So that's how bad memory accesses are dealt with. In the case of a failure, if
it's a child thread that dies, then the parent knows how to
when it dies the child deals with cleaning up its executables, destroying
pages it has, settings its return value..

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Threads now store "load_results" of loading. The parent and child
have a relationship that makes the parent constantly yield
inside of process_execute until the child has some nonzero
status of load. In the case of -1, the child quit because
of a failure so, otehrwise the parent gets the pid.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

We have a lock and indicator variable to make sure that the child and parent relationship is set up before the child runs any code. In any case:

P calls wait before C exits: This is okay, the parent will detect it
....after... : The child will have been added to a dead_list so the P will detect it.

All resources freed: P cleans up C in both cases, C also cleans up some of its resources

If P terminates before its child exits...
If P terminates without waiting after C exits it's okay, will have been cleaned up

No special cases



---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

It forms a nice interface for the system calls. Errors with actual
copying are dealt with inside of the calls, we can deal with
errors with bad pointers outside.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

A finite number of FDs is never a good idea.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We didn't.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

A little too hard, took too long. Wait took quite a while, as did figuring out
the issues with reading and writing over multiple pages

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Everything, this is hard, etc.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

A drawing of the general idea of argument passing
would be nice. A few heads up about the larger complexity
of write/read would also be nice

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
No.

>> Any other comments?
No.
